#!/usr/bin/env python3
"""
–û—á–∏—â–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏ –Ω–µ–Ω—É–∂–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import os
import shutil
from pathlib import Path

def cleanup_analysis_files():
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    
    files_to_remove = [
        # JSON —Ñ–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–∞
        "complete-photo-analysis.json",
        "image-analysis.json", 
        "image-optimization-plan.json",
        "rename-plan.json",
        "renaming-report.json",
        "organization-log.json",
        "responsive-images-config.json",
        
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ doc)
        "IMAGE-ORGANIZATION.md",
        "PHOTO-ANALYSIS-REPORT.md", 
        "WEBSITE-UPDATE-REPORT.md",
        
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ doc)
        "DEVELOPMENT.md",
        "DOCKER.md"
    ]
    
    print("REMOVING ANALYSIS AND TEMPORARY FILES")
    print("-" * 50)
    
    removed_count = 0
    for file_name in files_to_remove:
        file_path = Path(file_name)
        if file_path.exists():
            file_path.unlink()
            print(f"Removed: {file_name}")
            removed_count += 1
        else:
            print(f"Not found: {file_name}")
    
    print(f"\nRemoved {removed_count} analysis files")

def cleanup_scripts():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫—É scripts –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    scripts_dir = Path("scripts")
    
    # –§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∞–Ω–∞–ª–∏–∑–∞)
    scripts_to_remove = [
        "analyze-all-photos.py",
        "analyze-images.py", 
        "apply-renaming.py",
        "organize-images.bat",
        "organize-images.ps1",
        "organize-into-folders.py",
        "rename-images.py",
        "update-website-images.py",
        "optimize-images.py"
    ]
    
    # –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ–ª–µ–∑–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã)
    scripts_to_keep = [
        "docker-dev.sh",
        "docker-dev.ps1", 
        "monitor.sh",
        "monitor.ps1",
        "start-docker-desktop.sh",
        "start-docker-desktop.ps1",
        "cleanup-project.py"  # –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
    ]
    
    print(f"\nCLEANING UP SCRIPTS FOLDER")
    print("-" * 40)
    
    removed_count = 0
    for script in scripts_to_remove:
        script_path = scripts_dir / script
        if script_path.exists():
            script_path.unlink()
            print(f"Removed: scripts/{script}")
            removed_count += 1
    
    print(f"\nScripts to keep:")
    for script in scripts_to_keep:
        script_path = scripts_dir / script
        if script_path.exists():
            print(f"  * scripts/{script}")
    
    print(f"\nRemoved {removed_count} temporary scripts")

def organize_documentation():
    """–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ –ø–∞–ø–∫—É doc"""
    
    doc_dir = Path("doc")
    doc_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π README –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    main_readme = doc_dir / "README.md"
    with open(main_readme, 'w', encoding='utf-8') as f:
        f.write("""# Meadow Paradise Rancho - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

- **–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.txt** - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞
- **–ü—Ä–æ–º—Ç.txt** - –ü—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞

## –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

Meadow Paradise Rancho - —ç—Ç–æ –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç —Ä–∞–Ω—á–æ –≤ –ü–∏—Ä–≥–æ—Å–µ (–õ–∏–º–∞—Å—Å–æ–ª), —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º React, Vite, TypeScript –∏ TailwindCSS.

### –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω
- –ü–æ–ª–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
- SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (WCAG AA)
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (Lighthouse 90+)
- Docker –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
- React 19
- TypeScript
- TailwindCSS 4
- React Router 7
- Vite

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
- `app/` - –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- `public/` - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
- `scripts/` - –ü–æ–ª–µ–∑–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- `Dockerfile*` - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker
- `docker-compose*.yml` - Docker Compose —Ñ–∞–π–ª—ã
""")
    
    print(f"\nORGANIZED DOCUMENTATION")
    print("-" * 30)
    print(f"Created: doc/README.md")
    print(f"Existing docs:")
    
    for doc_file in doc_dir.iterdir():
        if doc_file.is_file():
            print(f"  * doc/{doc_file.name}")

def cleanup_backup_images():
    """–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç backup –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã)"""
    
    backup_dir = Path("public/images/backup")
    
    if backup_dir.exists():
        backup_size = sum(f.stat().st_size for f in backup_dir.rglob('*') if f.is_file())
        backup_size_mb = backup_size / (1024 * 1024)
        
        print(f"\nBACKUP IMAGES")
        print("-" * 20)
        print(f"Backup folder: {backup_dir}")
        print(f"Backup size: {backup_size_mb:.1f}MB")
        print(f"Files count: {len(list(backup_dir.rglob('*')))}")
        
        response = input("\nDelete backup images? (y/N): ").lower().strip()
        if response == 'y':
            shutil.rmtree(backup_dir)
            print("* Backup images deleted")
        else:
            print("* Backup images kept")

def cleanup_gallery_readmes():
    """–£–¥–∞–ª—è–µ—Ç README —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–æ–∫ –≥–∞–ª–µ—Ä–µ–∏"""
    
    gallery_dir = Path("public/images/gallery")
    
    print(f"\nCLEANING GALLERY READMES")
    print("-" * 30)
    
    removed_count = 0
    for readme in gallery_dir.rglob("README.md"):
        readme.unlink()
        print(f"Removed: {readme}")
        removed_count += 1
    
    print(f"Removed {removed_count} README files from gallery folders")

def update_main_readme():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π README.md"""
    
    readme_content = """# üêé Meadow Paradise Rancho

–ö—Ä–∞—Å–∏–≤—ã–π –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç —Ä–∞–Ω—á–æ –≤ –ü–∏—Ä–≥–æ—Å–µ (–õ–∏–º–∞—Å—Å–æ–ª) —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º.

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### Docker —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):

```bash
# –ó–∞–ø—É—Å–∫ —Å Docker Desktop –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
.\scripts\start-docker-desktop.ps1

# –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫
docker-compose -f docker-compose.dev.yml up --build -d
```

–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5173 –≤ –±—Ä–∞—É–∑–µ—Ä–µ.

### –û–±—ã—á–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞:

```bash
npm install
npm run dev
```

## üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

- **React 19** - UI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
- **TypeScript** - –¢–∏–ø–∏–∑–∞—Ü–∏—è
- **TailwindCSS 4** - –°—Ç–∏–ª–∏
- **Vite** - –°–±–æ—Ä—â–∏–∫
- **React Router 7** - –†–æ—É—Ç–∏–Ω–≥
- **Docker** - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞

- `app/` - –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
- `public/` - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
- `scripts/` - –ü–æ–ª–µ–∑–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
- `doc/` - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

## üé® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

- ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
- ‚úÖ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
- ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (WCAG AA)
- ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- ‚úÖ Hot reload –≤ Docker
- ‚úÖ –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

## üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã

**Meadow Paradise Rancho**  
üìç –ü–∏—Ä–≥–æ—Å, –õ–∏–º–∞—Å—Å–æ–ª, –ö–∏–ø—Ä  
üìû +35797719752  
üìß info@meadowparadise.com  
üåê [Instagram](https://www.instagram.com/meadow.paradise)

---

*–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞* üêé‚ú®
"""
    
    with open("README.md", 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print(f"\nUPDATED MAIN README")
    print("-" * 25)
    print("* README.md updated with clean, concise information")

def main():
    print("CLEANING UP MEADOW PARADISE RANCHO PROJECT")
    print("=" * 60)
    
    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–∞
    cleanup_analysis_files()
    
    # –û—á–∏—â–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
    cleanup_scripts()
    
    # –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    organize_documentation()
    
    # –£–¥–∞–ª—è–µ–º README –∏–∑ –≥–∞–ª–µ—Ä–µ–∏
    cleanup_gallery_readmes()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π README
    update_main_readme()
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º backup
    cleanup_backup_images()
    
    print(f"\n" + "="*60)
    print("PROJECT CLEANUP COMPLETE!")
    print("="*60)
    print("* Removed all analysis files")
    print("* Cleaned up temporary scripts")
    print("* Organized documentation in doc/")
    print("* Updated main README")
    print("* Removed gallery README files")
    print("\nYour project is now clean and organized! üêé‚ú®")

if __name__ == "__main__":
    main()
